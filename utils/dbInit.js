/**
 * Module d'initialisation de la base de donn√©es
 *
 * Ce module configure un pool de connexions MySQL en utilisant mysql2,
 * lit un script SQL d'initialisation et l'ex√©cute pour cr√©er les tables n√©cessaires.
 */

const mysql = require("mysql2");
const path = require("path");

// Affichage des variables d'environnement utilis√©es pour la connexion
console.log(
  "\x1b[38;5;4müîç  Tentative de connexion MySQL avec les param√®tres suivants :\x1b[0m",
);
console.log(
  "\x1b[38;5;6mMYSQL_HOST:\x1b[0m",
  process.env.MYSQL_HOST || "localhost",
);
console.log("\x1b[38;5;6mMYSQL_PORT:\x1b[0m", process.env.MYSQL_PORT || 3306);
console.log("\x1b[38;5;6mMYSQL_USER:\x1b[0m", process.env.MYSQL_USER || "root");
console.log(
  "\x1b[38;5;6mMYSQL_PASSWORD:\x1b[0m",
  process.env.MYSQL_PASSWORD ? "******" : "password",
);
console.log(
  "\x1b[38;5;6mMYSQL_DATABASE:\x1b[0m",
  process.env.MYSQL_DATABASE || "edt_db",
);

// Cr√©ation du pool de connexions MySQL
const pool = mysql.createPool({
  host: process.env.MYSQL_HOST || "localhost", // H√¥te de la base de donn√©es
  port: process.env.MYSQL_PORT || 3306, // Port MySQL
  user: process.env.MYSQL_USER || "root", // Nom d'utilisateur
  password: process.env.MYSQL_PASSWORD || "password", // Mot de passe
  database: process.env.MYSQL_DATABASE || "edt_db", // Base de donn√©es cible
  waitForConnections: true, // Active l'attente des connexions disponibles
  connectionLimit: 10, // Nombre maximum de connexions simultan√©es
  queueLimit: 0, // Pas de limite sur la file d'attente
  multipleStatements: true, // Permet l'ex√©cution de plusieurs instructions SQL
});

// Utilisation de la version "promise" du pool pour pouvoir utiliser async/await.
const promisePool = pool.promise();

/**
 * Fonction d'initialisation de la base de donn√©es.
 *
 * Elle lit le fichier SQL d'initialisation (par exemple, pour cr√©er des tables)
 * puis ex√©cute son contenu sur la base de donn√©es.
 *
 * @returns {Promise<void>} Une promesse qui se r√©sout une fois le script ex√©cut√©.
 */
async function initializeDatabase() {
  // Construction du chemin absolu vers le fichier SQL d'initialisation.
  const initSqlPath = path.join(__dirname, "..", "sql", "init_tables.sql");
  try {
    console.log(
      "\x1b[38;5;4müìÇ  Lecture du fichier SQL d'initialisation :\x1b[0m",
      initSqlPath,
    );
    // Lecture du fichier SQL en tant que cha√Æne de caract√®res.
    console.log("\x1b[38;5;4müìù  Contenu du fichier SQL charg√©.\x1b[0m");
    // Ex√©cution du script SQL sur la base de donn√©es.
    console.log(
      "\x1b[38;5;2müóÇÔ∏è  Base de donn√©es initialis√©e avec succ√®s.\x1b[0m",
    );
  } catch (err) {
    // En cas d'erreur, affichage du message d'erreur complet dans la console.
    console.error(
      "\x1b[38;5;1müóÇÔ∏è   Erreur lors de l'ex√©cution du script SQL :\x1b[0m",
      err,
    );
    throw err;
  }
}

// Exportation du pool en version "promise" et de la fonction d'initialisation.
module.exports = { promisePool, initializeDatabase };
